TÓPICO 208: Manutenção do sistema======================================
=======================================================================
121. 208.1 Implementando um Web Server (Apache)========================
==Instalação e comandos básicos========================================

No Debian o pacote é o "apache2", o comando principal é o "apache"
No CentOS o pacote é o "httpd", o comando principal é o "apache2ctl"

Podemos gerenciar usando o comando "httpd"

Os arquivos de configuração ficam em "/etc/httpd/" para o CentOS
	e em "/etc/apache2/" para o Debian
 
 
122. 208.1 Implementando um Web Server (Apache)========================
==Principais Configurações=============================================

No arquivo de configuração temos alguns parâmetros
	ServerRoot - diretorio onde está as configurações do servidor
	Listen - Permite definir a porta e quais IPs o apache irá ouvir
	Include - Inclui a configuração e outros arquivos
	User - Usuário que irá rodar o processo
	Group - Grupo que irá rodar o processo
	ServerAdmin - e-mail do administrador do sistema
	DocumentRoot - onde estará os arquivos que serão servidos pelo
		servidor web
	StartServers - Define a quantidade de processos iniciais
	MaxClients - Quantos clientes o servidor web vai tratar simultanea
		mente
	MinSpareServes - Estâncias reservas (padrão 5)
	MaxSpareServes - Estâncias reservas (padrão 20)
		Se existirem entre 5 e 20 ok, se passar de 20 o processo é
		matado
	MinSpareThread - Quantidade minima de threads
	MaxSpareThread - Quantidade maxima de threads
	ThreadsPerChild - Numero máximo de threads que cada filho vai ter
		(padrão 25)
	MaxRequestPerChild - Quantos request cada filho pode tratar no 
		maximo
	

123. 208.1 Implementando um Web Server (Apache)========================
==Modulos (phpperl)====================================================	

O pacote PHP: no CentOS o pacote é o "php" no Debian "php"

O arquivo de configuração fica em '/etc/httpd/php.conf'

Handler é um processo interno do Apache para gerenciar tipos especificos
	de dados, blocos
	
O "AddType" diz qual contet type o php faz parte

O "DirectoryIndex" é o arquivo que o php irá procurar

Carregamos o modulo em 'conf.modules.d'


O pacote Perl:
	No CentOs temos que instalar o pacote 'epel-release' para depois
		instalar o pacote 'mod_perl'
	No Debian instalamos o pacote 'libapache2-mod-perl2'
	
Temos que definir o Alias do Perl alterando o parâmetro Alias
Para que o apache interprete e gerencie os arquivos perl, descomenta
	mos a seguinte configuração
<Directory /var/www/perl>
	SetHandler perl-script
	PerlResponseHandler ModPerl::Registry
	PerlOptions +ParseHeaders
	Options +ExecCGI
</Directory>


124. 208.1 Implementando um Web Server (Apache)========================
==Arquivos de Logs=====================================================

Os logs ficam registrados em 'logs/error_log'
O parâmetro é o "ErrorLog"
O parâmetro "LogLevel" define o nivel do log que será registrado

O parâmetro "LogFormat" define a maneira que os logs são registrados
O parâmetro "CustonLog" definimos qual arquivo irá usar o LogFormat	
	que criamos. Quando temos um "|" no inicio, signfica que ao invés
	de registrar um log, será executado um comando.


125. 208.1 Implementando um Web Server (Apache)========================
==Controle de Acesso - Usuário=========================================

Os controles de acesso são feitos pelos modulos *auth*

Os modulos "authn" são os modulos de autenticação
Os modulos "authz" são os modulos de autorização

###Controlando por usuário e senha

Criamos um arquivo contendo os usuários e as senhas

Usamos o comando 'htpasswd -s -c /var/www/html/.htpasswd <usuario>'
	-s definir o tipo de hash
	-c para especificar o arquivo
	
Podemos especificar por grupos criando umm arquivo listando os grupos
"
suporte: aluno2 aluno3
admin: ricardo aluno1
"

	
Temos que autorizar o Apache a acessar o arquivo com os usuários e
	com os grupos
"
<Directory /var/www/html>
	Options Indexes FollowSymLinks
	AllowOverride all
	Require all granted
</Directory>
"
	Indexes - permite usar os arquivos .index
	FollowSymLinks - permite que o Apache siga os links simbolicos
	AllowOverride - permite ler os arquivos de configuração
	Require all granted - permite que todo mundo use aquele diretorio
	
Configurar para que seja usuado o arquivo dentro do site do Apache
"
<Directory /var/www/html/topsecret>
	AuthType Basic 
	AuthName "Area Secreta de Acesso"
	AuthUserFile /var/www/html/topsecret/.htpasswd
	AuthGroupFile /var/www/html/topsecret/.htgroup
	Require valid-user
</Directory>
"

Conferindo a sintaxe dos arquivos do Apache
	'apachectl <arquivo>'
	

125. 208.1 Implementando um Web Server (Apache)========================
==Controle de Acesso - IP==============================================

Limitando acesso por IP forma antiga
"
<Directory /var/www/html/admin>
	Order Deny, Allow
	Deny from all
	Allow from 192.168.1.210
</Directory>
"

Limitando acesso por IP forma mais nova
"
<Directory /var/www/html/admin>
	Require ip 192.168.1.210
	Require ip 172.16 # tudo que começa por 172.16
	Require host dominioexemplo.com.br
</Directory>
"

"
<Directory /var/www/html/admin>
	<RequireAll>
		Require all granted
		Require not ip 192.168.1.210
	</RequireAll>
</Directory>
"

127. 208.1 Implementando um Web Server (Apache)========================
==Virtual Host=========================================================

Permite ao Apache prover páginas diferentes quando o cliente chamar
  por IPs diferentes

Configuramos da seguinte forma:
"
<VirtualHost 192.168.1.221>
  DocumentRoot /var/www/site1
</VitualHost>

<VirtualHost 192.168.1.222>
  DocumentRoot /var/www/site2
</VirtualHost>
"

Importante se atentar para o parâmetro "Listen"

Configurando por dominio:
  Usa-se o parâmetro ServerName
"
<VirtualHost 192.168.1.220>
  ServerName www2.dominioexemplo.com.br
  DocumentRoot /var/www/site1
</VitualHost>

<VirtualHost 192.168.1.220>
  ServerName www3.dominioexemplo.com.br
  DocumentRoot /var/www/site2
</VirtualHost>
"


128. 208.1 Implementando um Web Server (Apache)========================
==UserDir e Redirecionamentos==========================================

O UserDir é um diretório padrão que estará presente na Home do usuário

Redirecionamento e Alias
"
<VirtualHost 192.168.1.220>
  ServerName www3.dominioexemplo.com.br
  DocumentRoot /var/www/site2
  Alias /docs /var/www/docs
</VirtualHost>
"

Configurar também os parâmetros "Indexes" "FollowSymLinks"

Com o parâmetro "AlliasMatch" podemos usar expressões regulares

Usando redirect:
"
<VirtualHost 192.168.1.220>
  ServerName www3.dominioexemplo.com.br
  DocumentRoot /var/www/site2
  Redirect /google http://www.google.com.br
  Redirect /antigo.html /test.php
</VirtualHost>
"

Com o parâmetro "RedirectMatch" podemos usar expressões regulares

131. 208.2 Configurações do Apache para HTTPS==========================
==Gerando os Certificados==============================================

Temos que habilitar o modulo SSL. Precisamos de dois pacotes:
	'openssl' e o 'mod_ssl'
	
No arquivo '/httpd/conf.d/ssl.conf' temos a principais configurações
	do SSL. Necessário ter as seguintes linhas de configuraçõa

"
Listen 443 https
SSLEngine on
"

O SSLEngine é o parâmetro que habilita ou desabilita o SSL em um 
	virtual host

Geramos os certificados '/etc/ssl/certs' por padrão. Usamos o comando

'openssl genrsa -des3 -out dominioexemplo.com.br.key 1024'

Geramos o CSR

'openssl req -new -key dominoexemplo.com.br.key
	-out dominioexemplo.com.br.csr'
	
Assinamos o nosso proprio certificado
Entramos no diretório '/etc/pki/CA'
Usaremos o script '/etc/pki/tls/misc/CA.pl'

Geramos um novo CA e um certificado de CA ao rodar o script

Copiamos o arquivo do certificado ssl gerado para esse diretorio
'cp /etc/ssl/certs/dominioexemplo.com.br.csr newreq.pem'

Damos o comando para assinar o CSR
'/etc/pki/tls/misc/CA.pl -signreq'

Ao final temos o certificados que vamos usar no nosso domino
Copiamos esse certificado para o antigo
'cp newcert.pem /etc/ssl/certs/dominioexemplo.com.br.crt'


132. 208.2 Configurações do Apache para HTTPS==========================
==Instalando os certificados===========================================

Entramos na configuração do httpd
	'/etc/httpd/conf/httpd.conf'
	
A configuração do SSL tem que ser feito dentro da configuraçõa do
	virtual hosts para a porta 443
"
<VirtualHost 192.168.1.220:443>
	ServerName www.dominioexemplo.com.br
DocumentRoot /var/www/html
	SSLEngine on
	SSLCertificateFile /etc/ssl/certs/dominioexemplo.com.br.crt
	SSLCertificateKeyFile /etc/ssl/certs/dominioexemplo.com.br.key
</VirtualHost>
"

Reiniciamos o Apache

Podemos importar o certificado do CA para o navegador, ao importar
	o arquivo cacert.pem
	

133. 208.2 Configurações do Apache para HTTPS==========================
==Certificados de clientes=============================================

É possivel limitar o acesso ao site para apenas os clientes que possue
	determinado certificado

Na configuração do VirtualHost adicionamos:
	O <Directory> e o SSLCACertificateFile
"
<VirtualHost 192.168.1.220:443>
	ServerName www.dominioexemplo.com.br
	DocumentRoot /var/www/html
	SSLEngine on
	SSLCertificateFile /etc/ssl/certs/dominioexemplo.com.br.crt
	SSLCertificateKeyFile /etc/ssl/certs/dominioexemplo.com.br.key
	SSLCACertificateFile /etc/ssl/certs/cacert.pem
	<Directory /var/www/html/cert>
		SSLVerifyClient require
	</Directory>
</VirtualHost>
"

Geramos uma chave para o usuário
'openssl genrsa -des3 -out usuario.key 2048'

Copiamos o certificado para a pasta dos certificados e rodamos o script
'cp /etc/ssl/certs/usuario.csr newreq.pem'
'/etc/pki/tls/misc/CA.pl -signreq'

Temos que gerar um certificado do tipo p12 que contem o certificado
	a chave juntos para ser importado no navegador
'openssl pkcs12 -export -inkey usuario.key -in usuario.crt -out usuario.p12'

Copiamos esse arquivo para o cliente e importamos para o navegador
	do cliente

134. 208.2 Configurações do Apache para HTTPS==========================
==Configurações de segurança===========================================

As configurações de segurança ficam em '/etc/httpd/conf.d/ssl.conf'

No parâmetro "SSLProtocol" definimos quais protocolos o servidor irá
	aceitar
	
O parâmetro "SSLCipherSuite" definimos quais algoritmos de criptografia
	que permitimos o uso. O que tem "!" antes não são aceitos
	
O parâmetro "SSLHonorCipherOrder" define que será seguido a ordem 
	definida no parâmetro "SSLCipherSuite"
	
Obtendo a versão do Apache atraves de uma requisição no navegador
	'curl --head http://192.168.1.220'
	
Podemos limitar essas infomações que aparecem ao requistarmos pelo curl
Na configuração do ssl.conf setamos o parametro "ServerTokens" com 
	'ServerTokens Prod' o padrão é "Full", mas temos também o "OS"
	
Outra configuração é referente as mensagens de erros informadas pelo 
	servidor. O parâmetro "ServerSignature" define essa configuração
	podemos setar como "On", "Off" (padrão) ou "email"
	
Com o Apache podemos obter um Trace das requisições usando o curl
	'curl -v -X TRACE http://192.168.1.220'
	Trocamos o parametro "TraceEnable" para Off


135. 208.2 Configurações do Apache para HTTPS==========================
==SNI==================================================================

SNI (Server Name Indicator). É uma extensão do SSL/TLS que possibilita
	o uso de VirtualHost por nomes em acessos HTTPS. Com esse recurso
	o cliente (navegador) inclui o endereço no estabelecimento da 
	conexão SSL/TLS (handshake)
	

137. 208.3 Implementando um Servidor Proxy (Squid)=====================
==Instalação e Configuração============================================

Principais recursos:
	Cache: Melhoria da performance e velocidade no acesso
	Filtros/Bloqueios: Permite definir o que pode ser acessado quem e
		quando e etc
	Autenticação de usuários

Instalado o squid usando o pacote 'squid' ou 'squid3'

Os logs ficam em '/var/log/squid'

O comando principal é 'squid'
	-v para ver a versão
	-k permite uma serie de operações como '-k reconfigure'
	-z para recriar a estrutura de diretórios
	
O arquivo de configuração fica em '/etc/squid/squid.conf'
	O parâmetro que define a porta é o "http_port"


138. 208.3 Implementando um Servidor Proxy (Squid)=====================
==Cache================================================================

Configuramos em '/etc/squid/squid.conf' no parâmetro "cache_dir"
	'cache_dir ufs /var/spool/squid 100 16 256'
	o "ufs" é o tipo de armazenamento
	"/var/spool/squid" é o diretório que será armazenado o cache
	"100" quantidade maxima em MB que será armazenado
	"16" é a estrutura de diretorio com 16 diretorios principais
	"256" é a quantidade de subdiretorios
	
Damos o comando 'squid -z' para recriar estrutura de diretorios


139. 208.3 Implementando um Servidor Proxy (Squid)=====================
==Controle de acesso===================================================

As configurações também ficam em '/etc/squid/squid.conf'. Configuramos
	ACLS

Como se define uma ACL:
	'acl localnet src 10.0.0.8/8'
	"localnet" nome da acl
	"src" tipo de acl
	"10.0.0.8/8" valores ou lista de valores separado por espaço ou
		em linhas separadas, ou o uso de um arquivo

Tipos de ACLS
	src: IP/REDE
	dst: IP/REDE
	srcdomain: .google.com	
	dstdomain: 
	port:
	proto:
	browser:
	time: S (Domingo), M (Segunda), T (Terça), W (Quarta), H (Quinta)
		F (Sexta) e A (Sabado)
	url_regex: busca a expressão por toda a url
	urlpath_regex: busca a expressão somente depois do dominio
	
Usamos essas ACLs através do parâmetro "http_access"
	'http_access deny !Safe_ports'
	

140. 208.3 Implementando um Servidor Proxy (Squid)=====================
==Autenticação=========================================================

Definimos os parâmetros que serão utilizados nessa autenticação com o 
	parâmetro "auth_param"
	'auth_param basic realm Por favor se identifique-se' #mensagem
	'auth_param basic program /usr/lib64/squid/basic_ncsa_auth
		/etc/squid/passwords' #arquivo que será usado
		
A autenticação será definida pelo arquivo do 'htpasswd' 
Ex:
	'htpasswd /etc/squid/passwords paulo'
	

142. 208.4 Implementando o NGINX como WebServer e Proxy Reverso========
==Configurações========================================================

O NGINX é um servidor Web e Proxy Reverso. No proxy reverso as 
	requisições da internet chegam primeiro no proxy, para depois o 
	proxy redistribuir para os servidores internos
	
Para instalar requistamos o pacote 'nginx'

Os arquivos de configuração ficam em '/etc/nginx'

As principais configurações dentro do nginx.conf: 
	As configurações são divididas em blocos
	Dentro do bloco "HTTP" temos o bloco "Server" onde está as 
		configurações do servidor
	"listen" é a porta que ele irá ouvir
	"server_name" onde especificamos o nome do servidor
	"root" semelhante ao documentroot do apache, é onde o nginx irá
		buscar as informações
	"index" especificamos quais os arquivos de index que iremos usar
	
Temos o comando 'nginx' para certas configurações
	-v para versões
	-t para testar as configurações
	-s <sinal> como stop/quit/reload/reopen


143. 208.4 Implementando o NGINX como WebServer e Proxy Reverso========
==FastCGI PHP==========================================================

O FastCGI é um tipo de protocolo de interface entre o servidor web
	e o programa o script
	
Temos que instalar o pacote 'php-fpm'

Para configurar no nginx:
	"
	location ~ \.php$ {
		fastcgi_pass localhost:9000;
		fastcgi_param QUERY_STRING; #para passar parâmetros
	}
	"

A configuração do php-fpm fica em '/etc/php-fpm.d/www.conf'


144. 208.4 Implementando o NGINX como WebServer e Proxy Reverso========
==Proxy Reverso========================================================

Configuramos da seguinte forma:
"
location / {
	proxy_pass http:192.168.1.220:80; #endereço de encaminhamento
	proxy_set_header X-Real-IP $remote_addr; #parametros que alteramos
}
"

Para encaminhar para varios servidores Web. Dentro do bloco http 
	criamos o bloco "upstream backend" e nele definimos os servers
"
http {
	upstream backend {
		server 192.168.1.210;
		server 192.168.1.220;
	}
}
"
	Alteramos o parâmetro "proxy_pass" colocando:
	'proxy_pass http://backend;'

